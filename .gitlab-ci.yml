image: node:18

stages:
  - install
  - build
  - deploy

variables:
  DOMAIN: "shavaz"
  NGINX_SITES_AVAILABLE: "/etc/nginx/sites-available"
  NGINX_SITES_ENABLED: "/etc/nginx/sites-enabled"
  WWW_ROOT: "/var/www/${DOMAIN}/dev/frontend"

install_dependencies:
  stage: install
  only:
    - release
  script:
    - pwd
    - npm install

build:
  stage: build
  only:
    - release
  script:
    - npm ci
    - ls
    - npm run build
  artifacts:
    paths:
      - .output/ 
      - ecosystem.config.cjs

deploy:
  stage: deploy
  only:
    - release
  script:
    - BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | sed 's/\//_/g')
    - DEPLOY_DIR="${WWW_ROOT}/${BRANCH_NAME}"
    - NGINX_FILE_NAME=${BRANCH_NAME}.frontend.dev
    - NGINX_CONF="${NGINX_SITES_AVAILABLE}/${NGINX_FILE_NAME}"

    # Find an available port (this is a placeholder script, adjust as needed)
    - |
      for PORT in {3000..3100}; do
        if ! sudo netstat -tuln | grep -q ":$PORT"; then
          PORT_USED=$PORT
          break
        fi
      done
    - echo "Using port $PORT_USED"

    # Create Nginx config file for the branch with actual values
    - |
      sudo bash -c "cat > $NGINX_CONF" << EOF

      server {
          listen 80;
          server_name $NGINX_FILE_NAME.shvz.ir;
          return 301 https://\$server_name\$request_uri;  # Redirect HTTP to HTTPS
      }

      server {
          listen 443 ssl;
          server_name $NGINX_FILE_NAME.shvz.ir;

          ssl_certificate /etc/letsencrypt/live/$NGINX_FILE_NAME.shvz.ir/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/$NGINX_FILE_NAME.shvz.ir/privkey.pem;
          ssl_trusted_certificate /etc/letsencrypt/live/$NGINX_FILE_NAME.shvz.ir/chain.pem;

          ssl_protocols TLSv1.2 TLSv1.3;  # Enable modern SSL protocols
          ssl_ciphers HIGH:!aNULL:!MD5;
          root $DEPLOY_DIR;  # Path to your static files
          index index.html;

          location / {
              proxy_pass http://127.0.0.1:$PORT_USED; # Use dynamically assigned port
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host \$host;
              proxy_cache_bypass \$http_upgrade;
          }
      }
      EOF

    - if [ -L "${NGINX_SITES_ENABLED}/${NGINX_FILE_NAME}" ]; then
        sudo rm "${NGINX_SITES_ENABLED}/${NGINX_FILE_NAME}";
      fi

    # Link the Nginx config file to sites-enabled
    - sudo ln -s $NGINX_CONF ${NGINX_SITES_ENABLED}/${NGINX_FILE_NAME}

    # Create the directory structure for the branch
    - sudo mkdir -p $DEPLOY_DIR

    # Rsync static files to the deploy directory
    - sudo rsync -av --delete .output/ $DEPLOY_DIR

    # Set correct permissions for Nginx access
    - sudo chown -R www-data:www-data $DEPLOY_DIR
    - sudo chmod -R 755 $DEPLOY_DIR
    - sudo find $DEPLOY_DIR -type f -exec chmod 644 {} \;

    # Check the Nginx configuration
    - sudo nginx -t

    # If Nginx config is OK, reload Nginx
    - if [ $? -eq 0 ]; then sudo systemctl reload nginx; else echo "Nginx configuration test failed" && exit 1; fi

    
    # Generate the ecosystem file dynamically if needed
    - |
      sudo bash -c "cat > $DEPLOY_DIR/ecosystem.config.js" << EOF
      module.exports = {
        apps: [
          {
            name: "$BRANCH_NAME",
            exec_mode: 'cluster',
            instances: 'max',
            script: './server/index.mjs',
            port: $PORT_USED
          }
        ]
      };
      EOF
      
    # Clean up old PM2 processes before starting the new one
    - sudo pm2 delete $BRANCH_NAME || true
    
    # Start or restart the new PM2 process with the ecosystem file
    - cd $DEPLOY_DIR
    - sudo pm2 start ecosystem.config.js
    - sudo pm2 save
    
    - echo "Deployment complete."
  environment:
    name: production
    url: https://$NGINX_FILE_NAME.shvz.ir
